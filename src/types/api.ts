/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/workspaces": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Workspaces
         * @description List workspaces
         */
        get: operations["list_workspaces_v1_workspaces_get"];
        put?: never;
        /**
         * Create Workspace
         * @description Create a new workspace - compatible with ntcli
         */
        post: operations["create_workspace_v1_workspaces_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workspaces/{workspace_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Workspace Details
         * @description Get workspace details - authentication and access handled by dependency
         */
        get: operations["get_workspace_details_v1_workspaces__workspace_id__get"];
        put?: never;
        post?: never;
        /**
         * Delete Workspace
         * @description Delete workspace - authentication and access handled by dependency
         */
        delete: operations["delete_workspace_v1_workspaces__workspace_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workspaces/{workspace_id}/secrets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Workspace Secrets
         * @description List all secrets for a workspace
         */
        get: operations["list_workspace_secrets_v1_workspaces__workspace_id__secrets_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workspaces/{workspace_id}/secrets/{secret_key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Set Workspace Secret
         * @description Set a secret for a workspace
         */
        put: operations["set_workspace_secret_v1_workspaces__workspace_id__secrets__secret_key__put"];
        post?: never;
        /**
         * Delete Workspace Secret
         * @description Delete a secret from a workspace
         */
        delete: operations["delete_workspace_secret_v1_workspaces__workspace_id__secrets__secret_key__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workspaces/{workspace_id}/servers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Workspace Servers
         * @description List servers deployed in a workspace
         */
        get: operations["list_workspace_servers_v1_workspaces__workspace_id__servers_get"];
        put?: never;
        /**
         * Deploy Server To Workspace
         * @description Deploy server to workspace - accepts MCP server definition from registry
         */
        post: operations["deploy_server_to_workspace_v1_workspaces__workspace_id__servers_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workspaces/{workspace_id}/servers/{server_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Workspace Server
         * @description Get server details
         */
        get: operations["get_workspace_server_v1_workspaces__workspace_id__servers__server_id__get"];
        put?: never;
        post?: never;
        /**
         * Remove Workspace Server
         * @description Remove server from workspace
         */
        delete: operations["remove_workspace_server_v1_workspaces__workspace_id__servers__server_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workspaces/{workspace_id}/servers/{server_id}/scale": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Scale Workspace Server
         * @description Scale server - authentication handled by dependency
         */
        post: operations["scale_workspace_server_v1_workspaces__workspace_id__servers__server_id__scale_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workspaces/{workspace_id}/servers/{server_id}/restart": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Restart Workspace Server
         * @description Restart server deployment - authentication handled by dependency
         */
        post: operations["restart_workspace_server_v1_workspaces__workspace_id__servers__server_id__restart_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/token_auth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Validate Auth
         * @description Validate authentication for ingress auth_request.
         *
         *     This endpoint is called by nginx-ingress for every request to validate the bearer token.
         *     It validates workspace JWT tokens and returns appropriate headers for authorization.
         *
         *     Returns:
         *         200 OK with auth headers if token is valid
         *         401 Unauthorized if token is invalid or missing
         */
        get: operations["validate_auth_v1_token_auth_get"];
        put?: never;
        /**
         * Validate Auth
         * @description Validate authentication for ingress auth_request.
         *
         *     This endpoint is called by nginx-ingress for every request to validate the bearer token.
         *     It validates workspace JWT tokens and returns appropriate headers for authorization.
         *
         *     Returns:
         *         200 OK with auth headers if token is valid
         *         401 Unauthorized if token is invalid or missing
         */
        post: operations["validate_auth_v1_token_auth_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workspaces/{workspace_id}/tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Workspace Tokens
         * @description List all active tokens for a workspace.
         *
         *     Args:
         *         workspace_id: The workspace UUID
         *         current_user: Current authenticated user
         *         provider: Provider instance
         *         token_manager: Token manager instance
         *
         *     Returns:
         *         List of active tokens for the workspace
         */
        get: operations["list_workspace_tokens_v1_workspaces__workspace_id__tokens_get"];
        put?: never;
        /**
         * Create Workspace Token
         * @description Create a new token for workspace access.
         *
         *     Args:
         *         workspace_id: The workspace UUID
         *         token_request: Token creation parameters
         *         current_user: Current authenticated user
         *         provider: Provider instance
         *         token_manager: Token manager instance
         *
         *     Returns:
         *         Created token and metadata
         */
        post: operations["create_workspace_token_v1_workspaces__workspace_id__tokens_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workspaces/{workspace_id}/tokens/{token_jti}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Revoke Workspace Token
         * @description Revoke a specific workspace token by JWT ID.
         *
         *     Args:
         *         workspace_id: The workspace UUID
         *         token_jti: The JWT ID of the token to revoke
         *         current_user: Current authenticated user
         *         provider: Provider instance
         *         token_manager: Token manager instance
         *
         *     Returns:
         *         Revocation confirmation
         */
        delete: operations["revoke_workspace_token_v1_workspaces__workspace_id__tokens__token_jti__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Root
         * @description Root endpoint with platform info
         */
        get: operations["root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check
         * @description Health check endpoint
         */
        get: operations["health_check_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * HealthCheck
         * @description Health check response
         */
        HealthCheck: {
            /**
             * Status
             * @description Health status
             */
            status: string;
            /**
             * Version
             * @description API version
             */
            version: string;
            /**
             * Service
             * @description API service
             */
            service: string;
            /**
             * Timestamp
             * Format: date-time
             * @description Check timestamp
             */
            timestamp: string;
        };
        /**
         * ServerDeleteResponse
         * @description Server deletion response
         */
        ServerDeleteResponse: {
            /**
             * Server Id
             * @description Deleted server ID
             */
            server_id: string;
            /**
             * Workspace Id
             * Format: uuid
             * @description Workspace ID
             */
            workspace_id: string;
            /**
             * Namespace
             * @description Kubernetes namespace
             */
            namespace: string;
            /**
             * Status
             * @description Deletion status
             */
            status: string;
            /**
             * Message
             * @description Deletion message
             */
            message: string;
        };
        /**
         * ServerDeployResponse
         * @description Server deployment response
         */
        ServerDeployResponse: {
            /**
             * Server Id
             * @description Deployed server ID
             */
            server_id: string;
            /**
             * Workspace Id
             * Format: uuid
             * @description Workspace ID
             */
            workspace_id: string;
            /**
             * Namespace
             * @description Kubernetes namespace
             */
            namespace: string;
            /**
             * Status
             * @description Deployment status
             */
            status: string;
            /**
             * Message
             * @description Deployment message
             */
            message: string;
            /**
             * Service Endpoint
             * @description MCP service endpoint URL
             */
            service_endpoint: string;
        };
        /**
         * ServerDetailsResponse
         * @description Server details response
         */
        ServerDetailsResponse: {
            /**
             * Id
             * @description Server ID
             */
            id: string;
            /**
             * Name
             * @description Server name
             */
            name: string;
            /**
             * Workspace Id
             * Format: uuid
             * @description Workspace ID
             */
            workspace_id: string;
            /**
             * Namespace
             * @description Kubernetes namespace
             */
            namespace: string;
            /**
             * Image
             * @description Container image
             */
            image: string;
            /**
             * Spec
             * @description Server specification
             */
            spec: {
                [key: string]: unknown;
            };
            /**
             * Status
             * @description Server status details
             */
            status: {
                [key: string]: unknown;
            };
            /**
             * Created
             * @description Creation timestamp
             */
            created?: string | null;
        };
        /**
         * ServerListResponse
         * @description Server list response
         */
        ServerListResponse: {
            /**
             * Servers
             * @description List of servers
             */
            servers: components["schemas"]["ServerSummary"][];
            /**
             * Workspace Id
             * Format: uuid
             * @description Workspace ID
             */
            workspace_id: string;
            /**
             * Namespace
             * @description Kubernetes namespace
             */
            namespace: string;
            /**
             * Total
             * @description Total number of servers
             */
            total: number;
        };
        /**
         * ServerRestartRequest
         * @description Server restart request
         */
        ServerRestartRequest: {
            /**
             * Version
             * @description API version
             * @default v1
             */
            version: string;
            /**
             * Force
             * @description Force restart even if server is running
             * @default false
             */
            force: boolean;
        };
        /**
         * ServerRestartResponse
         * @description Server restart response
         */
        ServerRestartResponse: {
            /**
             * Version
             * @description API version
             * @default v1
             */
            version: string;
            /**
             * Server Id
             * @description Restarted server ID
             */
            server_id: string;
            /**
             * Workspace Id
             * Format: uuid
             * @description Workspace ID
             */
            workspace_id: string;
            /**
             * Status
             * @description Restart status
             */
            status: string;
            /**
             * Message
             * @description Restart message
             */
            message: string;
            /**
             * Timestamp
             * Format: date-time
             * @description Restart timestamp
             */
            timestamp: string;
        };
        /**
         * ServerScaleRequest
         * @description Server scaling request
         */
        ServerScaleRequest: {
            /**
             * Replicas
             * @description Number of replicas
             */
            replicas: number;
        };
        /**
         * ServerScaleResponse
         * @description Server scaling response
         */
        ServerScaleResponse: {
            /**
             * Server Id
             * @description Scaled server ID
             */
            server_id: string;
            /**
             * Workspace Id
             * Format: uuid
             * @description Workspace ID
             */
            workspace_id: string;
            /**
             * Replicas
             * @description New replica count
             */
            replicas: number;
            /**
             * Status
             * @description Scaling status
             */
            status: string;
            /**
             * Message
             * @description Scaling message
             */
            message: string;
        };
        /**
         * ServerSummary
         * @description Server summary for list responses
         */
        ServerSummary: {
            /**
             * Id
             * @description Server ID
             */
            id: string;
            /**
             * Name
             * @description Server name
             */
            name: string;
            /**
             * Workspace Id
             * Format: uuid
             * @description Workspace ID
             */
            workspace_id: string;
            /**
             * Namespace
             * @description Kubernetes namespace
             */
            namespace: string;
            /**
             * Image
             * @description Container image
             */
            image: string;
            /**
             * Status
             * @description Server status
             */
            status: string;
            /**
             * Replicas
             * @description Number of replicas
             */
            replicas: number;
            /**
             * Created
             * @description Creation timestamp
             */
            created?: string | null;
        };
        /**
         * TokenCreateRequest
         * @description Request model for creating a new token.
         */
        TokenCreateRequest: {
            /**
             * Scope
             * @default [
             *       "workspace:read",
             *       "servers:read"
             *     ]
             */
            scope: string[];
            /**
             * Expires In
             * @default 31536000
             */
            expires_in: number;
        };
        /**
         * TokenCreateResponse
         * @description Response model for token creation.
         */
        TokenCreateResponse: {
            /** Access Token */
            access_token: string;
            /**
             * Token Type
             * @default Bearer
             */
            token_type: string;
            /** Expires In */
            expires_in: number;
            /** Workspace Id */
            workspace_id: string;
            /** Scope */
            scope: string[];
        };
        /**
         * TokenInfo
         * @description Model for token information in list response.
         */
        TokenInfo: {
            /** Jti */
            jti: string;
            /** Created At */
            created_at: number;
        };
        /**
         * TokenListResponse
         * @description Response model for listing tokens.
         */
        TokenListResponse: {
            /** Workspace Id */
            workspace_id: string;
            /** Tokens */
            tokens: components["schemas"]["TokenInfo"][];
            /** Count */
            count: number;
        };
        /**
         * TokenRevokeResponse
         * @description Response model for token revocation.
         */
        TokenRevokeResponse: {
            /** Workspace Id */
            workspace_id: string;
            /** Token Jti */
            token_jti: string;
            /** Status */
            status: string;
            /** Revoked At */
            revoked_at: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /**
         * WorkspaceCreateRequest
         * @description Workspace creation request
         */
        WorkspaceCreateRequest: {
            /**
             * Name
             * @description Workspace name
             */
            name: string;
            /**
             * Description
             * @description Workspace description
             */
            description?: string | null;
        };
        /**
         * WorkspaceCreateResponse
         * @description Workspace creation response
         */
        WorkspaceCreateResponse: {
            /**
             * Workspace Name
             * @description Base workspace name
             */
            workspace_name: string;
            /**
             * Workspace Id
             * Format: uuid
             * @description Unique workspace ID
             */
            workspace_id: string;
            /**
             * Namespace
             * @description Kubernetes namespace
             */
            namespace: string;
            /**
             * User Id
             * Format: uuid
             * @description User ID who created the workspace
             */
            user_id: string;
            /**
             * Organization Id
             * Format: uuid
             * @description Organization ID
             */
            organization_id: string;
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp
             */
            created_at: string;
            /**
             * Status
             * @description Workspace status
             */
            status: string;
            /**
             * Message
             * @description Success message
             */
            message: string;
        };
        /**
         * WorkspaceDeleteResponse
         * @description Workspace delete response
         */
        WorkspaceDeleteResponse: {
            /**
             * Workspace Id
             * Format: uuid
             * @description Deleted workspace ID
             */
            workspace_id: string;
            /**
             * Namespace
             * @description Deleted namespace
             */
            namespace: string;
            /**
             * Message
             * @description Success message
             */
            message: string;
        };
        /**
         * WorkspaceDetailsResponse
         * @description Workspace details response
         */
        WorkspaceDetailsResponse: {
            /**
             * Workspace Id
             * Format: uuid
             * @description Unique workspace ID
             */
            workspace_id: string;
            /**
             * Workspace Name
             * @description Workspace name
             */
            workspace_name?: string | null;
            /**
             * Namespace
             * @description Kubernetes namespace
             */
            namespace: string;
            /**
             * User Id
             * @description User ID who owns the workspace
             */
            user_id?: string | null;
            /**
             * Organization Id
             * @description Organization ID
             */
            organization_id?: string | null;
            /**
             * Created At
             * @description Creation timestamp
             */
            created_at?: string | null;
            /**
             * Status
             * @description Workspace status
             */
            status: string;
        };
        /**
         * WorkspaceListResponse
         * @description Workspace list response
         */
        WorkspaceListResponse: {
            /**
             * Workspaces
             * @description List of workspaces
             */
            workspaces: components["schemas"]["WorkspaceSummary"][];
            /**
             * Total
             * @description Total number of workspaces
             */
            total: number;
            /**
             * User Id
             * Format: uuid
             * @description User ID requesting the list
             */
            user_id: string;
        };
        /**
         * WorkspaceSecretResponse
         * @description Workspace secret operation response
         */
        WorkspaceSecretResponse: {
            /**
             * Workspace Id
             * Format: uuid
             * @description Workspace ID
             */
            workspace_id: string;
            /**
             * Secret Key
             * @description Secret key
             */
            secret_key: string;
            /**
             * Status
             * @description Operation status
             */
            status: string;
            /**
             * Message
             * @description Operation message
             */
            message: string;
        };
        /**
         * WorkspaceSecretSetRequest
         * @description Workspace secret set request
         */
        WorkspaceSecretSetRequest: {
            /**
             * Secret Value
             * @description Secret value to store
             */
            secret_value: string;
        };
        /**
         * WorkspaceSecretsResponse
         * @description Workspace secrets list response
         */
        WorkspaceSecretsResponse: {
            /**
             * Workspace Id
             * Format: uuid
             * @description Workspace ID
             */
            workspace_id: string;
            /**
             * Secrets
             * @description List of secret keys
             */
            secrets: string[];
            /**
             * Count
             * @description Number of secrets
             */
            count: number;
            /**
             * Message
             * @description Additional message
             */
            message: string;
        };
        /**
         * WorkspaceSummary
         * @description Workspace summary for list responses
         */
        WorkspaceSummary: {
            /**
             * Workspace Id
             * Format: uuid
             * @description Unique workspace ID
             */
            workspace_id: string;
            /**
             * Workspace Name
             * @description Workspace name
             */
            workspace_name: string;
            /**
             * Namespace
             * @description Kubernetes namespace
             */
            namespace: string;
            /**
             * User Id
             * @description User ID who owns the workspace
             */
            user_id?: string | null;
            /**
             * Organization Id
             * @description Organization ID
             */
            organization_id?: string | null;
            /**
             * Created At
             * @description Creation timestamp
             */
            created_at?: string | null;
            /**
             * Status
             * @description Workspace status
             */
            status: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    list_workspaces_v1_workspaces_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceListResponse"];
                };
            };
        };
    };
    create_workspace_v1_workspaces_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WorkspaceCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceCreateResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_workspace_details_v1_workspaces__workspace_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceDetailsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_workspace_v1_workspaces__workspace_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceDeleteResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_workspace_secrets_v1_workspaces__workspace_id__secrets_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceSecretsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    set_workspace_secret_v1_workspaces__workspace_id__secrets__secret_key__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: string;
                secret_key: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WorkspaceSecretSetRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceSecretResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_workspace_secret_v1_workspaces__workspace_id__secrets__secret_key__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: string;
                secret_key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceSecretResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_workspace_servers_v1_workspaces__workspace_id__servers_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServerListResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    deploy_server_to_workspace_v1_workspaces__workspace_id__servers_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: unknown;
                };
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServerDeployResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_workspace_server_v1_workspaces__workspace_id__servers__server_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: string;
                server_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServerDetailsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    remove_workspace_server_v1_workspaces__workspace_id__servers__server_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: string;
                server_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServerDeleteResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    scale_workspace_server_v1_workspaces__workspace_id__servers__server_id__scale_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: string;
                server_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ServerScaleRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServerScaleResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    restart_workspace_server_v1_workspaces__workspace_id__servers__server_id__restart_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: string;
                server_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ServerRestartRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServerRestartResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    validate_auth_v1_token_auth_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-Original-URL"?: string | null;
                "X-Original-Method"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    validate_auth_v1_token_auth_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
                "X-Original-URL"?: string | null;
                "X-Original-Method"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_workspace_tokens_v1_workspaces__workspace_id__tokens_get: {
        parameters: {
            query?: {
                k8s_client?: unknown;
            };
            header?: {
                authorization?: string | null;
            };
            path: {
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenListResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_workspace_token_v1_workspaces__workspace_id__tokens_post: {
        parameters: {
            query?: {
                k8s_client?: unknown;
            };
            header?: {
                authorization?: string | null;
            };
            path: {
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TokenCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenCreateResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    revoke_workspace_token_v1_workspaces__workspace_id__tokens__token_jti__delete: {
        parameters: {
            query?: {
                k8s_client?: unknown;
            };
            header?: {
                authorization?: string | null;
            };
            path: {
                workspace_id: string;
                token_jti: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenRevokeResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    health_check_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthCheck"];
                };
            };
        };
    };
}
