/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/workspaces": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Workspaces
         * @description List workspaces - compatible with ntcli
         */
        get: operations["list_workspaces_v1_workspaces_get"];
        put?: never;
        /**
         * Create Workspace
         * @description Create a new workspace - compatible with ntcli
         */
        post: operations["create_workspace_v1_workspaces_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workspaces/{workspace_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Workspace Details
         * @description Get workspace details - authentication handled by dependency
         */
        get: operations["get_workspace_details_v1_workspaces__workspace_id__get"];
        put?: never;
        post?: never;
        /**
         * Delete Workspace
         * @description Delete workspace - authentication handled by dependency
         */
        delete: operations["delete_workspace_v1_workspaces__workspace_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workspaces/{workspace_id}/tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get Workspace Token
         * @description Generate workspace token - simplified for community version
         */
        post: operations["get_workspace_token_v1_workspaces__workspace_id__tokens_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workspaces/{workspace_id}/secrets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Workspace Secrets
         * @description List all secrets for a workspace
         */
        get: operations["list_workspace_secrets_v1_workspaces__workspace_id__secrets_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workspaces/{workspace_id}/secrets/{secret_key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Set Workspace Secret
         * @description Set a secret for a workspace
         */
        put: operations["set_workspace_secret_v1_workspaces__workspace_id__secrets__secret_key__put"];
        post?: never;
        /**
         * Delete Workspace Secret
         * @description Delete a secret from a workspace
         */
        delete: operations["delete_workspace_secret_v1_workspaces__workspace_id__secrets__secret_key__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workspaces/{workspace_id}/servers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Workspace Servers
         * @description List servers - authentication handled by dependency
         */
        get: operations["list_workspace_servers_v1_workspaces__workspace_id__servers_get"];
        put?: never;
        /**
         * Deploy Server To Workspace
         * @description Deploy server - authentication handled by dependency
         */
        post: operations["deploy_server_to_workspace_v1_workspaces__workspace_id__servers_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workspaces/{workspace_id}/servers/{server_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Workspace Server
         * @description Get server details - authentication handled by dependency
         */
        get: operations["get_workspace_server_v1_workspaces__workspace_id__servers__server_id__get"];
        put?: never;
        post?: never;
        /**
         * Remove Workspace Server
         * @description Remove server - authentication handled by dependency
         */
        delete: operations["remove_workspace_server_v1_workspaces__workspace_id__servers__server_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/workspaces/{workspace_id}/servers/{server_id}/scale": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Scale Workspace Server
         * @description Scale server - authentication handled by dependency
         */
        post: operations["scale_workspace_server_v1_workspaces__workspace_id__servers__server_id__scale_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/registry/servers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Registry Servers
         * @description List available MCP servers from all registries owned by the user
         *     Aggregates servers from all registries created by the authenticated user
         */
        get: operations["list_registry_servers_v1_registry_servers_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/registry/servers/{server_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Registry Server
         * @description Get detailed information about a specific server from user's registries
         *     Searches across all registries owned by the authenticated user
         */
        get: operations["get_registry_server_v1_registry_servers__server_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/registry/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Registries
         * @description List all registries owned by the authenticated user
         */
        get: operations["list_registries_v1_registry__get"];
        put?: never;
        /**
         * Create Registry
         * @description Create a registry from URL and deploy its services
         *     Creates namespace and deploys all active services from the registry
         */
        post: operations["create_registry_v1_registry__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/registry/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Registry Info Endpoint
         * @description Get information about a registry from its URL
         */
        get: operations["get_registry_info_endpoint_v1_registry_info_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Root
         * @description Root endpoint with platform info
         */
        get: operations["root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check
         * @description Health check endpoint
         */
        get: operations["health_check_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * HealthCheck
         * @description Health check response
         */
        HealthCheck: {
            /**
             * Status
             * @description Health status
             */
            status: string;
            /**
             * Version
             * @description API version
             */
            version: string;
            /**
             * Service
             * @description API service
             */
            service: string;
            /**
             * Timestamp
             * Format: date-time
             * @description Check timestamp
             */
            timestamp: string;
        };
        /**
         * Registry
         * @description Registry resource
         */
        Registry: {
            /**
             * Name
             * @description Registry name
             */
            name: string;
            /**
             * Namespace
             * @description Kubernetes namespace
             */
            namespace: string;
            /**
             * Url
             * @description Registry URL
             */
            url?: string | null;
            /**
             * Server Count
             * @description Number of servers in this registry
             */
            server_count: number;
            /**
             * Created At
             * Format: date-time
             * @description Creation timestamp
             */
            created_at: string;
            /**
             * Owner
             * @description Registry owner
             */
            owner: string;
        };
        /**
         * RegistryEnableRequest
         * @description Registry enable request
         */
        RegistryEnableRequest: {
            /**
             * Registry Url
             * @description URL to registry.yaml file
             */
            registry_url: string;
            /**
             * Namespace Override
             * @description Override namespace name
             */
            namespace_override?: string | null;
        };
        /**
         * RegistryEnableResponse
         * @description Registry enable response
         */
        RegistryEnableResponse: {
            /**
             * Registry Name
             * @description Registry name
             */
            registry_name: string;
            /**
             * Registry Version
             * @description Registry version
             */
            registry_version: string;
            /**
             * Namespace
             * @description Created namespace
             */
            namespace: string;
            /**
             * Services Created
             * @description Number of services created
             */
            services_created: number;
            /**
             * Services
             * @description List of created service names
             */
            services: string[];
            /**
             * Timestamp
             * Format: date-time
             * @description Enable timestamp
             */
            timestamp?: string;
        };
        /**
         * RegistryInfo
         * @description Registry information
         */
        RegistryInfo: {
            /**
             * Name
             * @description Registry name
             */
            name: string;
            /**
             * Version
             * @description Registry version
             */
            version: string;
            /**
             * Url
             * @description Registry URL
             */
            url: string;
            /**
             * Last Updated
             * @description Last updated date
             */
            last_updated?: string | null;
            /**
             * Total Servers
             * @description Total servers in registry
             */
            total_servers: number;
            /**
             * Active Servers
             * @description Active servers in registry
             */
            active_servers: number;
        };
        /**
         * RegistryListResponse
         * @description Registry list response
         */
        RegistryListResponse: {
            /**
             * Registries
             * @description List of registries
             */
            registries: components["schemas"]["Registry"][];
            /**
             * Total
             * @description Total number of registries
             */
            total: number;
            /**
             * Total Servers
             * @description Total servers across all registries
             */
            total_servers: number;
            /**
             * Owner
             * @description Owner of the registries
             */
            owner: string;
        };
        /**
         * RegistryServerSummary
         * @description Registry server summary for list responses
         */
        RegistryServerSummary: {
            /**
             * Id
             * @description Server ID
             */
            id: string;
            /**
             * Name
             * @description Server name
             */
            name: string;
            /**
             * Description
             * @description Server description
             */
            description: string;
            /**
             * Image
             * @description Container image
             */
            image: string;
            /**
             * Version
             * @description Server version
             */
            version: string;
            /**
             * Status
             * @description Server status
             */
            status: string;
            /**
             * Registry
             * @description Registry name
             */
            registry: string;
            /**
             * Namespace
             * @description Namespace
             */
            namespace: string;
            /**
             * Deployment
             * @description Deployment config
             */
            deployment: {
                [key: string]: unknown;
            };
            /**
             * Tools
             * @description Available tools
             */
            tools?: string[];
            /**
             * Replicas
             * @description Replica information
             */
            replicas: {
                [key: string]: number;
            };
            /**
             * Category
             * @description Server category
             */
            category?: string | null;
            /**
             * Tags
             * @description Server tags
             */
            tags?: string[];
        };
        /**
         * RegistryServersResponse
         * @description Registry servers list response
         */
        RegistryServersResponse: {
            /**
             * Servers
             * @description List of servers
             */
            servers: components["schemas"]["RegistryServerSummary"][];
            /**
             * Total
             * @description Total number of servers
             */
            total: number;
            /**
             * Registries
             * @description Registry information
             */
            registries: {
                [key: string]: unknown;
            }[];
            /**
             * Owner
             * @description Owner
             */
            owner: string;
        };
        /**
         * ServerDeleteResponse
         * @description Server deletion response
         */
        ServerDeleteResponse: {
            /**
             * Server Id
             * @description Deleted server ID
             */
            server_id: string;
            /**
             * Workspace Id
             * @description Workspace ID
             */
            workspace_id: string;
            /**
             * Namespace
             * @description Kubernetes namespace
             */
            namespace: string;
            /**
             * Status
             * @description Deletion status
             */
            status: string;
            /**
             * Message
             * @description Deletion message
             */
            message: string;
        };
        /**
         * ServerDeployRequest
         * @description Server deployment request
         */
        ServerDeployRequest: {
            /**
             * Server Id
             * @description Server ID to deploy
             */
            server_id: string;
            /**
             * Replicas
             * @description Number of replicas
             * @default 1
             */
            replicas: number;
            /**
             * Environment
             * @description Environment variables
             */
            environment?: {
                [key: string]: string;
            };
        };
        /**
         * ServerDeployResponse
         * @description Server deployment response
         */
        ServerDeployResponse: {
            /**
             * Server Id
             * @description Deployed server ID
             */
            server_id: string;
            /**
             * Workspace Id
             * @description Workspace ID
             */
            workspace_id: string;
            /**
             * Namespace
             * @description Kubernetes namespace
             */
            namespace: string;
            /**
             * Status
             * @description Deployment status
             */
            status: string;
            /**
             * Message
             * @description Deployment message
             */
            message: string;
            /**
             * Mcp Endpoint
             * @description MCP endpoint URL
             */
            mcp_endpoint: string;
            /**
             * Health Endpoint
             * @description Health check endpoint URL
             */
            health_endpoint: string;
        };
        /**
         * ServerDetailsResponse
         * @description Server details response
         */
        ServerDetailsResponse: {
            /**
             * Id
             * @description Server ID
             */
            id: string;
            /**
             * Name
             * @description Server name
             */
            name: string;
            /**
             * Workspace Id
             * @description Workspace ID
             */
            workspace_id: string;
            /**
             * Namespace
             * @description Kubernetes namespace
             */
            namespace: string;
            /**
             * Image
             * @description Container image
             */
            image: string;
            /**
             * Spec
             * @description Server specification
             */
            spec: {
                [key: string]: unknown;
            };
            /**
             * Status
             * @description Server status details
             */
            status: {
                [key: string]: unknown;
            };
            /**
             * Created
             * @description Creation timestamp
             */
            created?: string | null;
        };
        /**
         * ServerListResponse
         * @description Server list response
         */
        ServerListResponse: {
            /**
             * Servers
             * @description List of servers
             */
            servers: components["schemas"]["ServerSummary"][];
            /**
             * Workspace Id
             * @description Workspace ID
             */
            workspace_id: string;
            /**
             * Namespace
             * @description Kubernetes namespace
             */
            namespace: string;
            /**
             * Total
             * @description Total number of servers
             */
            total: number;
        };
        /**
         * ServerScaleRequest
         * @description Server scaling request
         */
        ServerScaleRequest: {
            /**
             * Replicas
             * @description Number of replicas
             */
            replicas: number;
        };
        /**
         * ServerScaleResponse
         * @description Server scaling response
         */
        ServerScaleResponse: {
            /**
             * Server Id
             * @description Scaled server ID
             */
            server_id: string;
            /**
             * Workspace Id
             * @description Workspace ID
             */
            workspace_id: string;
            /**
             * Replicas
             * @description New replica count
             */
            replicas: number;
            /**
             * Status
             * @description Scaling status
             */
            status: string;
            /**
             * Message
             * @description Scaling message
             */
            message: string;
        };
        /**
         * ServerSummary
         * @description Server summary for list responses
         */
        ServerSummary: {
            /**
             * Id
             * @description Server ID
             */
            id: string;
            /**
             * Name
             * @description Server name
             */
            name: string;
            /**
             * Workspace Id
             * @description Workspace ID
             */
            workspace_id: string;
            /**
             * Namespace
             * @description Kubernetes namespace
             */
            namespace: string;
            /**
             * Image
             * @description Container image
             */
            image: string;
            /**
             * Status
             * @description Server status
             */
            status: string;
            /**
             * Replicas
             * @description Number of replicas
             */
            replicas: number;
            /**
             * Created
             * @description Creation timestamp
             */
            created?: string | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /**
         * WorkspaceCreateRequest
         * @description Workspace creation request
         */
        WorkspaceCreateRequest: {
            /**
             * Name
             * @description Workspace name
             */
            name: string;
            /**
             * @description Workspace tier
             * @default community
             */
            tier: components["schemas"]["WorkspaceTier"];
            /**
             * Description
             * @description Workspace description
             */
            description?: string | null;
        };
        /**
         * WorkspaceCreateResponse
         * @description Workspace creation response
         */
        WorkspaceCreateResponse: {
            /**
             * Workspace Name
             * @description Base workspace name
             */
            workspace_name: string;
            /**
             * Workspace Id
             * @description Unique workspace ID
             */
            workspace_id: string;
            /**
             * Namespace
             * @description Kubernetes namespace
             */
            namespace: string;
            /**
             * Tier
             * @description Workspace tier
             */
            tier: string;
            /**
             * Created
             * @description Creation timestamp
             */
            created: string;
            /**
             * Status
             * @description Workspace status
             */
            status: string;
            /**
             * Message
             * @description Success message
             */
            message: string;
        };
        /**
         * WorkspaceDeleteResponse
         * @description Workspace delete response
         */
        WorkspaceDeleteResponse: {
            /**
             * Workspace Id
             * @description Deleted workspace ID
             */
            workspace_id: string;
            /**
             * Namespace
             * @description Deleted namespace
             */
            namespace: string;
            /**
             * Message
             * @description Success message
             */
            message: string;
        };
        /**
         * WorkspaceDetailsResponse
         * @description Workspace details response
         */
        WorkspaceDetailsResponse: {
            /**
             * Workspace Id
             * @description Unique workspace ID
             */
            workspace_id: string;
            /**
             * Workspace Name
             * @description Workspace name
             */
            workspace_name?: string | null;
            /**
             * Namespace
             * @description Kubernetes namespace
             */
            namespace: string;
            /**
             * Tier
             * @description Workspace tier
             */
            tier: string;
            /**
             * Created
             * @description Creation timestamp
             */
            created?: string | null;
            /**
             * Owner
             * @description Workspace owner
             */
            owner?: string | null;
            /**
             * Status
             * @description Workspace status
             */
            status: string;
        };
        /**
         * WorkspaceListResponse
         * @description Workspace list response
         */
        WorkspaceListResponse: {
            /**
             * Workspaces
             * @description List of workspaces
             */
            workspaces: components["schemas"]["WorkspaceSummary"][];
            /**
             * Total
             * @description Total number of workspaces
             */
            total: number;
            /**
             * User Id
             * @description User ID
             */
            user_id: string;
        };
        /**
         * WorkspaceSecretResponse
         * @description Workspace secret operation response
         */
        WorkspaceSecretResponse: {
            /**
             * Workspace Id
             * @description Workspace ID
             */
            workspace_id: string;
            /**
             * Secret Key
             * @description Secret key
             */
            secret_key: string;
            /**
             * Status
             * @description Operation status
             */
            status: string;
            /**
             * Message
             * @description Operation message
             */
            message: string;
        };
        /**
         * WorkspaceSecretSetRequest
         * @description Workspace secret set request
         */
        WorkspaceSecretSetRequest: {
            /**
             * Secret Value
             * @description Secret value to store
             */
            secret_value: string;
        };
        /**
         * WorkspaceSecretsResponse
         * @description Workspace secrets list response
         */
        WorkspaceSecretsResponse: {
            /**
             * Workspace Id
             * @description Workspace ID
             */
            workspace_id: string;
            /**
             * Secrets
             * @description List of secret keys
             */
            secrets: string[];
            /**
             * Count
             * @description Number of secrets
             */
            count: number;
            /**
             * Message
             * @description Additional message
             */
            message: string;
        };
        /**
         * WorkspaceSummary
         * @description Workspace summary for list responses
         */
        WorkspaceSummary: {
            /**
             * Workspace Id
             * @description Unique workspace ID
             */
            workspace_id: string | null;
            /**
             * Workspace Name
             * @description Workspace name
             */
            workspace_name: string;
            /**
             * Namespace
             * @description Kubernetes namespace
             */
            namespace: string;
            /**
             * Tier
             * @description Workspace tier
             */
            tier: string;
            /**
             * Created
             * @description Creation timestamp
             */
            created: string | null;
            /**
             * Owner
             * @description Workspace owner
             */
            owner: string | null;
            /**
             * Status
             * @description Workspace status
             */
            status: string;
        };
        /**
         * WorkspaceTier
         * @description Workspace tier options
         * @enum {string}
         */
        WorkspaceTier: "community" | "enterprise";
        /**
         * WorkspaceTokenResponse
         * @description Workspace token response
         */
        WorkspaceTokenResponse: {
            /**
             * Access Token
             * @description Access token
             */
            access_token: string;
            /**
             * Token Type
             * @description Token type
             */
            token_type: string;
            /**
             * Scope
             * @description Token scope
             */
            scope: string[];
            /**
             * Workspace Id
             * @description Workspace ID
             */
            workspace_id: string;
            /**
             * Expires In
             * @description Token expiration in seconds
             */
            expires_in: number;
            /**
             * Message
             * @description Additional message
             */
            message: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    list_workspaces_v1_workspaces_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceListResponse"];
                };
            };
        };
    };
    create_workspace_v1_workspaces_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WorkspaceCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceCreateResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_workspace_details_v1_workspaces__workspace_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceDetailsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_workspace_v1_workspaces__workspace_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceDeleteResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_workspace_token_v1_workspaces__workspace_id__tokens_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceTokenResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_workspace_secrets_v1_workspaces__workspace_id__secrets_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceSecretsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    set_workspace_secret_v1_workspaces__workspace_id__secrets__secret_key__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: string;
                secret_key: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WorkspaceSecretSetRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceSecretResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_workspace_secret_v1_workspaces__workspace_id__secrets__secret_key__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: string;
                secret_key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceSecretResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_workspace_servers_v1_workspaces__workspace_id__servers_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServerListResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    deploy_server_to_workspace_v1_workspaces__workspace_id__servers_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ServerDeployRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServerDeployResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_workspace_server_v1_workspaces__workspace_id__servers__server_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: string;
                server_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServerDetailsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    remove_workspace_server_v1_workspaces__workspace_id__servers__server_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: string;
                server_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServerDeleteResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    scale_workspace_server_v1_workspaces__workspace_id__servers__server_id__scale_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: string;
                server_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ServerScaleRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServerScaleResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_registry_servers_v1_registry_servers_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegistryServersResponse"];
                };
            };
        };
    };
    get_registry_server_v1_registry_servers__server_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                server_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_registries_v1_registry__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegistryListResponse"];
                };
            };
        };
    };
    create_registry_v1_registry__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegistryEnableRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegistryEnableResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_registry_info_endpoint_v1_registry_info_get: {
        parameters: {
            query: {
                registry_url: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegistryInfo"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    health_check_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthCheck"];
                };
            };
        };
    };
}
